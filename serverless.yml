org: oberrones
app: yoox-serverless-api
service: login-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  stage: dev
  apiGateway:
    shouldStartNameWithService: true
  httpApi:
    authorizers:
      authorizerFunc:
        type: request
        functionName: authorizerFunc
        identitySource:
          - $request.header.authorization
    cors:
      allowedOrigins:
        - https://www.yooxgrupofinanciero.com
        - https://development.yooxgrupofinanciero.com
        - https://staging.yooxgrupofinanciero.com
        - http://localhost:4200

functions:
  login:
    handler: ./src/user-service/login.handler
    events:
      - httpApi:
          path: /v1/login
          method: post

  tokenValidation:
    handler: ./src/authorizer/tokenValidation.handler
    events:
      - httpApi:
          path: /v1/tokenValidation
          method: get

  payment:
    handler: ./src/payments/payment.handler
    events:
      - httpApi:
          method: post
          path: /v1/payment
          authorizer:
            name: authorizerFunc

  newLoanRequest:
    handler: ./src/loan-requests/newLoan.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan-request/new
          authorizer:
            name: authorizerFunc

  updateLoanRequest:
    handler: ./src/loan-requests/updateLoan.handler
    events:
      - httpApi:
          method: put
          path: /v1/loan-request/update
          authorizer:
            name: authorizerFunc

  viewLoanRequest:
    handler: ./src/loan-requests/viewLoan.handler
    events:
      - httpApi:
          method: get
          path: /v1/loan-request/view
          authorizer:
            name: authorizerFunc

  loan:
    handler: ./src/payments/loan.handler
    events:
      - httpApi:
          method: get
          path: /v1/loan/{id}
          authorizer:
            name: authorizerFunc

  authorizerFunc:
    handler: ./src/authorizer/auth.handler

custom:
  stage: ${opt:stage, self:provider.stage}
  environment:
    NODE_ENV: ${self:custom.stage}

# to run swagger locally with offline mode, run: sls offline start
plugins:
  - serverless-dotenv-plugin
  - serverless-auto-swagger
  - serverless-esbuild
  - serverless-offline
