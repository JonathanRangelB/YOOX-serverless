org: jonathanrangel
app: yoox-serverless-api
service: login-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  stage: dev
  apiGateway:
    shouldStartNameWithService: true
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: customAuthorizer
        identitySource:
          - $request.header.authorization
    cors:
      allowedOrigins:
        - https://www.yooxgrupofinanciero.com
        - https://development.yooxgrupofinanciero.com
        - https://staging.yooxgrupofinanciero.com
        - http://localhost:4200
      allowedHeaders:
        - Content-Type
        - authorization
package:
  individually: true
useDotenv: true

functions:
  login:
    handler: ./src/user-service/login.handler
    events:
      - httpApi:
          path: /v1/login
          method: post

  tokenValidation:
    handler: ./src/authorizer/tokenValidation.handler
    events:
      - httpApi:
          path: /v1/tokenValidation
          method: get

  tokenRefresh:
    handler: ./src/authorizer/tokenRefresh.handler
    events:
      - httpApi:
          path: /v1/tokenRefresh
          method: post

  payment:
    handler: ./src/payments/payment.handler
    events:
      - httpApi:
          method: post
          path: /v1/payment
          authorizer:
            name: customAuthorizer

  newLoanRequest:
    handler: ./src/loan-requests/newLoan.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan-request/new
          authorizer:
            name: customAuthorizer

  updateLoanRequest:
    handler: ./src/loan-requests/updateLoan.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan-request/update
          authorizer:
            name: customAuthorizer

  viewLoanRequest:
    handler: ./src/loan-requests/viewLoan.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan-request/view
          authorizer:
            name: customAuthorizer

  viewRequestList:
    handler: ./src/loan-requests/viewLoanList.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan-request/list
          authorizer:
            name: customAuthorizer

  loan:
    handler: ./src/payments/loan.handler
    events:
      - httpApi:
          method: post
          path: /v1/loan/{id}
          authorizer:
            name: customAuthorizer

  uploadFiles:
    handler: ./src/customerFiles/uploadFiles.handler
    events:
      - httpApi:
          path: /v1/upload
          method: post
          authorizer:
            name: customAuthorizer

  getFile:
    handler: ./src/customerFiles/getFile.handler
    events:
      - httpApi:
          path: /v1/file
          method: post
          authorizer:
            name: customAuthorizer

  listFiles:
    handler: ./src/customerFiles/listFiles.handler
    events:
      - httpApi:
          path: /v1/list-files/{foldername}
          method: get
          authorizer:
            name: customAuthorizer

  getCustomer:
    handler: ./src/general-data-requests/getCustomer.handler
    events:
      - httpApi:
          method: post
          path: /v1/get-customer
          authorizer:
            name: customAuthorizer

  validateCURP:
    handler: ./src/validators/validateCURP.handler
    events:
      - httpApi:
          method: post
          path: /v1/validate/curp
          authorizer:
            name: customAuthorizer

  validatePhones:
    handler: ./src/validators/validatePhones.handler
    events:
      - httpApi:
          method: post
          path: /v1/validate/phones
          authorizer:
            name: customAuthorizer

  installments:
    handler: ./src/installments/installments.handler
    events:
      - httpApi:
          method: get
          path: /v1/installments
          authorizer:
            name: customAuthorizer

  customerLoanStatus:
    handler: ./src/customerLoanStatus/customerLoanStatus.handler
    events:
      - httpApi:
          method: get
          path: /v1/customer-loan-status

  getAddress:
    handler: ./src/general-data-requests/getAddress.handler
    events:
      - httpApi:
          method: get
          path: /v1/address
          authorizer:
            name: customAuthorizer

  getLoansRefinance:
    handler: ./src/general-data-requests/getLoansRefinance.handler
    events:
      - httpApi:
          method: get
          path: /v1/loans-refinance
          authorizer:
            name: customAuthorizer

  getGuarantor:
    handler: ./src/general-data-requests/getGuarantor.handler
    events:
      - httpApi:
          method: get
          path: /v1/get-guarantor
          authorizer:
            name: customAuthorizer

  getLatestDesktopVersion:
    handler: ./src/general-data-requests/getLatestDesktopVersion.handler
    events:
      - httpApi:
          method: get
          path: /v1/desktop-version
          authorizer:
            name: customAuthorizer

  customAuthorizer:
    handler: ./src/authorizer/auth.handler

  processWhatsappMessage:
    handler: src/whatsapp/sqsHandler.handler
    memorySize: 256
    events:
      - sqs: ${env:MAIN_SQS_ARN} 

custom:
  stage: ${opt:stage, self:provider.stage}
  environment:
    NODE_ENV: ${self:custom.stage}
  serverless-offline-sqs:
    autoCreate: true                  # Crea las colas de tu 'resources' automáticamente en ElasticMQ
    endpoint: http://0.0.0.0:9324     # El endpoint de tu SQS local
    region: ${self:provider.region}   # Usa la misma región que tu provider
    accessKeyId: root                 # Credenciales dummy para el cliente local
    secretAccessKey: root             # Credenciales dummy para el cliente local

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild
  - serverless-offline-sqs
  - serverless-offline
